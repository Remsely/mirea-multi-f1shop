-------------------------- DB INIT --------------------------

CREATE TABLE IF NOT EXISTS users
(
    id       BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email    VARCHAR(320) NOT NULL,
    password VARCHAR(320) NOT NULL,
    role     VARCHAR(20)  NOT NULL,
    CONSTRAINT UQ_USER_EMAIL UNIQUE (email)
);

CREATE TABLE IF NOT EXISTS products
(
    id          BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name        VARCHAR(320)  NOT NULL,
    category    VARCHAR(40)   NOT NULL,
    description VARCHAR(2000) NOT NULL,
    image_link  VARCHAR(1000) NOT NULL,
    price       REAL          NOT NULL,
    amount      INTEGER       NOT NULL,
    CONSTRAINT POSITIVE_PRODUCT_AMOUNT CHECK (amount >= 0),
    CONSTRAINT POSITIVE_PRODUCT_PRICE CHECK (price > 0)
);

CREATE TABLE IF NOT EXISTS cart_products
(
    user_id    BIGINT REFERENCES users (id)    NOT NULL,
    product_id BIGINT REFERENCES products (id) NOT NULL,
    amount     INTEGER                         NOT NULL,
    CONSTRAINT POSITIVE_CART_PRODUCT_AMOUNT CHECK (amount >= 0)
);

CREATE TABLE IF NOT EXISTS wishlist_products
(
    user_id    BIGINT REFERENCES users (id)    NOT NULL,
    product_id BIGINT REFERENCES products (id) NOT NULL
);

CREATE TABLE IF NOT EXISTS orders
(
    id                      BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id                 BIGINT REFERENCES users (id) NOT NULL,
    date                    TIMESTAMP                    NOT NULL,
    recipients_full_name    VARCHAR(100)                 NOT NULL,
    recipients_phone_number VARCHAR(16)                  NOT NULL,
    recipients_email        VARCHAR(320)                 NOT NULL,
    address                 VARCHAR(200)                 NOT NULL,
    intercom                VARCHAR(20)                  NOT NULL,
    comments                VARCHAR(200)
);

CREATE TABLE IF NOT EXISTS order_products
(
    order_id   BIGINT REFERENCES orders (id)   NOT NULL,
    product_id BIGINT REFERENCES products (id) NOT NULL,
    amount     INTEGER                         NOT NULL,
    price      REAL                            NOT NULL,
    CONSTRAINT POSITIVE_PRODUCT_PRICE CHECK (price > 0),
    CONSTRAINT POSITIVE_ORDER_PRODUCT_AMOUNT CHECK (amount >= 0)
);


-------------------------- TRIGGERS --------------------------

CREATE TABLE IF NOT EXISTS delete_logs
(
    log_id       BIGSERIAL PRIMARY KEY,
    table_name   VARCHAR(100) NOT NULL,
    record_id    BIGINT       NOT NULL,
    deleted_data TEXT,
    deleted_by   VARCHAR(100),
    deleted_at   TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS update_logs
(
    log_id     BIGSERIAL PRIMARY KEY,
    table_name VARCHAR(100) NOT NULL,
    record_id  BIGINT       NOT NULL,
    old_data   TEXT,
    new_data   TEXT,
    updated_by VARCHAR(100),
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);



CREATE OR REPLACE FUNCTION add_product_to_wishlist_after_insert() RETURNS TRIGGER
    LANGUAGE plpgsql
AS
'
    BEGIN
        INSERT INTO wishlist_products (user_id, product_id)
        SELECT NEW.user_id,
               NEW.product_id
        WHERE NOT EXISTS (SELECT 1
                          FROM wishlist_products
                          WHERE user_id = NEW.user_id
                            AND product_id = NEW.product_id);
        RETURN NEW;
    END;
';

CREATE OR REPLACE TRIGGER cart_after_insert
    AFTER INSERT
    ON cart_products
    FOR EACH ROW
EXECUTE FUNCTION add_product_to_wishlist_after_insert();



CREATE OR REPLACE FUNCTION check_product_before_delete()
    RETURNS TRIGGER AS
'
    BEGIN
        IF EXISTS (SELECT 1
                   FROM cart_products
                   WHERE product_id = OLD.id) THEN
            RAISE EXCEPTION ''Product cannot be deleted as it is in the cart'';
        END IF;

        RETURN OLD;
    END;
' LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER product_before_delete
    BEFORE DELETE
    ON products
    FOR EACH ROW
EXECUTE FUNCTION check_product_before_delete();



CREATE OR REPLACE FUNCTION check_product_before_insert() RETURNS TRIGGER
    language plpgsql
AS
'
    BEGIN
        IF NEW.price <= 0 THEN
            RAISE EXCEPTION ''Price must be greater than 0'';
        END IF;

        IF NEW.amount < 0 THEN
            RAISE EXCEPTION ''Amount must be greater than or equal to 0'';
        END IF;

        RETURN NEW;
    END;
';

CREATE OR REPLACE TRIGGER product_before_insert
    BEFORE INSERT
    ON products
    FOR EACH ROW
EXECUTE FUNCTION check_product_before_insert();



CREATE OR REPLACE FUNCTION check_cart_update() RETURNS TRIGGER
    LANGUAGE plpgsql
AS
'
    BEGIN
        IF NEW.amount < 0 THEN
            RAISE EXCEPTION ''Amount in the cart cannot be negative'';
        END IF;

        RETURN NEW;
    END;
';

CREATE OR REPLACE TRIGGER cart_before_update
    BEFORE UPDATE
    ON cart_products
    FOR EACH ROW
EXECUTE FUNCTION check_cart_update();



CREATE OR REPLACE FUNCTION log_delete() RETURNS TRIGGER
    LANGUAGE plpgsql
AS
'
    BEGIN
        INSERT INTO delete_logs (table_name, record_id, deleted_data, deleted_by, deleted_at)
        VALUES (TG_TABLE_NAME,
                OLD.id,
                row_to_json(OLD)::TEXT,
                current_user,
                CURRENT_TIMESTAMP);
        RETURN OLD;
    END;
';

CREATE OR REPLACE TRIGGER log_order_delete
    AFTER DELETE
    ON orders
    FOR EACH ROW
EXECUTE FUNCTION log_delete();



CREATE OR REPLACE FUNCTION log_update() RETURNS TRIGGER
    language plpgsql
AS
'
    BEGIN
        INSERT INTO update_logs (table_name, record_id, old_data, new_data, updated_by, updated_at)
        VALUES (TG_TABLE_NAME,
                NEW.id,
                row_to_json(OLD)::TEXT,
                row_to_json(NEW)::TEXT,
                current_user,
                CURRENT_TIMESTAMP);
        RETURN NEW;
    END;
';

CREATE OR REPLACE TRIGGER log_order_update
    AFTER UPDATE
    ON orders
    FOR EACH ROW
EXECUTE FUNCTION log_update();



CREATE OR REPLACE FUNCTION add_to_cart(
    p_user_id bigint,
    p_product_id bigint,
    p_quantity integer
)
    RETURNS TABLE
            (
                user_id    bigint,
                product_id bigint,
                amount     integer
            )
    LANGUAGE plpgsql
AS
'
    BEGIN
        IF EXISTS (SELECT 1
                   FROM cart_products
                   WHERE cart_products.user_id = p_user_id
                     AND cart_products.product_id = p_product_id) THEN
            UPDATE cart_products
            SET amount = p_quantity
            WHERE cart_products.user_id = p_user_id
              AND cart_products.product_id = p_product_id;
            RETURN QUERY (select *
                          from cart_products c
                          where c.user_id = p_user_id
                            and c.product_id = p_product_id);
        ELSE
            INSERT INTO cart_products (user_id, product_id, amount)
            VALUES (p_user_id, p_product_id, p_quantity);
            RETURN QUERY (select *
                          from cart_products c
                          where c.user_id = p_user_id
                            and c.product_id = p_product_id);
        END IF;
        RETURN;
    END;
';

CREATE OR REPLACE PROCEDURE remove_from_cart(IN p_user_id BIGINT, IN p_product_id BIGINT)
    LANGUAGE plpgsql
AS
'
    BEGIN
        DELETE
        FROM cart_products
        WHERE user_id = p_user_id
          AND product_id = p_product_id;
    END;
';

CREATE OR REPLACE FUNCTION add_user(
    IN p_email CHARACTER VARYING,
    IN p_password CHARACTER VARYING,
    IN p_role CHARACTER VARYING
)
    RETURNS TABLE
            (
                id       BIGINT,
                email    CHARACTER VARYING,
                password CHARACTER VARYING,
                role     CHARACTER VARYING
            )
    LANGUAGE plpgsql
AS
'
    BEGIN
        INSERT INTO users (email, password, role)
        VALUES (p_email, p_password, p_role);
        RETURN QUERY (select *
                      from users u
                      where u.email = p_email);
    END;
';

CREATE OR REPLACE PROCEDURE clear_cart(IN p_user_id BIGINT)
    LANGUAGE plpgsql
AS
'
    BEGIN
        DELETE
        FROM cart_products
        WHERE user_id = p_user_id;
    END;
';

CREATE OR REPLACE FUNCTION create_order(
    p_user_id BIGINT,
    p_recipients_full_name CHARACTER VARYING,
    p_recipients_phone_number CHARACTER VARYING,
    p_recipients_email CHARACTER VARYING,
    p_address CHARACTER VARYING,
    p_intercom CHARACTER VARYING,
    p_comments CHARACTER VARYING DEFAULT NULL::CHARACTER VARYING
)
    RETURNS TABLE
            (
                id                      BIGINT,
                user_id                 BIGINT,
                date                    TIMESTAMP,
                recipients_full_name    CHARACTER VARYING,
                recipients_phone_number CHARACTER VARYING,
                recipients_email        CHARACTER VARYING,
                address                 CHARACTER VARYING,
                intercom                CHARACTER VARYING,
                comments                CHARACTER VARYING
            )
    LANGUAGE plpgsql
AS
'
    DECLARE
        created_order_id BIGINT;
    BEGIN
        INSERT INTO orders (user_id, date, recipients_full_name, recipients_phone_number, recipients_email, address,
                            intercom, comments)
        VALUES (p_user_id, NOW(), p_recipients_full_name, p_recipients_phone_number, p_recipients_email, p_address,
                p_intercom, p_comments)
        RETURNING orders.id
            INTO created_order_id;


        INSERT INTO order_products (order_id, product_id, amount, price)
        SELECT created_order_id,
               p.id,
               c.amount,
               p.price
        FROM cart_products c
                 JOIN products p ON c.product_id = p.id
        WHERE c.user_id = p_user_id;


        UPDATE products p
        SET amount = p.amount - c.amount
        FROM cart_products c
        WHERE c.product_id = p.id
          AND c.user_id = p_user_id;

        CALL clear_cart(p_user_id);

        RETURN QUERY (SELECT *
                      FROM orders o
                      WHERE o.id = created_order_id);
    END;
';

CREATE OR REPLACE FUNCTION is_in_cart(p_user_id BIGINT, p_product_id BIGINT) returns boolean
    LANGUAGE plpgsql
AS
'
    DECLARE
        exists BOOLEAN;
    BEGIN
        SELECT EXISTS (SELECT 1
                       FROM cart_products
                       WHERE user_id = p_user_id
                         AND product_id = p_product_id)
        INTO exists;

        RETURN exists;
    END;
';

CREATE OR REPLACE FUNCTION get_filtered_products(
    p_categories CHARACTER VARYING,
    p_search_query CHARACTER VARYING,
    p_sort_order CHARACTER VARYING
)
    RETURNS TABLE
            (
                id          BIGINT,
                name        VARCHAR(320),
                category    VARCHAR(40),
                description VARCHAR(2000),
                image_link  VARCHAR(1000),
                price       REAL,
                amount      INTEGER
            )
    LANGUAGE plpgsql
AS
'
    BEGIN
        RETURN QUERY
            SELECT *
            FROM products p
            WHERE p.category = ANY (string_to_array(p_categories, '',''))
              AND (p_search_query IS NULL OR p.name ILIKE ''%'' || p_search_query || ''%'')
            ORDER BY CASE WHEN p_sort_order = ''desc'' THEN p.price END DESC
                   , CASE WHEN p_sort_order = ''asc'' THEN p.price END;
    END;
';
